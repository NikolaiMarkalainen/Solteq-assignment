// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Solteq_server.data;

#nullable disable

namespace Solteq_server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Solteq_server.models.NutritionalDetails", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Calories")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("calories");

                    b.Property<string>("Carbohydrates")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("carbohydrates");

                    b.Property<string>("Fat")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fat");

                    b.Property<string>("Polyols")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("polyols");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("product_id");

                    b.Property<string>("Protein")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("protein");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("salt");

                    b.Property<string>("SaturatedFat")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("saturated_fat");

                    b.Property<string>("Sugars")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sugars");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("nutritional_details", (string)null);
                });

            modelBuilder.Entity("Solteq_server.models.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("CustomText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("custom_text");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ingredients");

                    b.Property<string>("ProductContains")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_contains");

                    b.Property<string>("ProductDoesNotContain")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_does_not_contain");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_name");

                    b.Property<string>("Warning")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("warning");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("Solteq_server.models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Solteq_server.models.NutritionalDetails", b =>
                {
                    b.HasOne("Solteq_server.models.Product", null)
                        .WithOne("NutritionalDetails")
                        .HasForeignKey("Solteq_server.models.NutritionalDetails", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Solteq_server.models.Product", b =>
                {
                    b.Navigation("NutritionalDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
